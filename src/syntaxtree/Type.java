//
// Generated by JTB 1.3.2
//

package syntaxtree;

import mytypes.MyBasicType;
import mytypes.MyGoal;
import mytypes.MySymbol;

/**
 * Grammar production:
 * f0 -> ArrayType()
 *       | BooleanType()
 *       | IntegerType()
 *       | Identifier()
 */
public class Type implements Node {
   public NodeChoice f0;

   public Type(NodeChoice n0) {
      f0 = n0;
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public boolean isIdentifier(){
	   return f0.which==3;
   }
   public Identifier toIdentifier(){
	   return (Identifier)f0.choice;
   }
   public MySymbol getMyType(MyGoal goal){
	   switch (f0.which){
		   case 2:
			   return MyBasicType.MyIntType;
		   case 1:
			   return MyBasicType.MyBooleanType;
		   case 0:
			   return MyBasicType.MyArrayType;
	   }  
	   return goal.classMap.get(toIdentifier().getName());
   }
}

